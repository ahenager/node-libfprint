#!/usr/bin/env node
// This script lists the available fingerprint readers on the system.
/// <reference path="../typings/tsd.d.ts"/>
var libfprint = require("../");
var sprintf = require("sprintf-js").sprintf;

var verbose = false;
if (process.argv.length > 2) {
    if (process.argv[2] == "-v") {
        verbose = true;
    } else {
        console.log("usage: lsfprint [-v]");
        process.exit(0);
    }
}

var fp = new libfprint.fprint();
console.log(sprintf("%8s %-8s %-8s %-32s", "handle", "type", "driver", "description"));

fp.init();
fp.discover().forEach(function (entry) {
    console.log(sprintf("%8d %-8s %-8s %-32s", entry.handle, entry.driver_type, entry.driver, entry.driver_detail));

    if (verbose) {
        var reader = fp.get_reader(entry.handle);
        console.log(sprintf("\t Enroll stages: %d", reader.enroll_stages));
        console.log(sprintf("\t Supports imaging: %s", reader.supports_imaging));
        console.log(sprintf("\t Supports identification: %s", reader.supports_identification));
        console.log(sprintf("\t Image height: %d", reader.img_height));
        console.log(sprintf("\t Image width: %d", reader.img_width));
        reader.close();
    }
});
fp.exit();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxzZnByaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFFQUFxRTtBQUVyRSwyQ0FBMkM7QUFFM0MsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM5QixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTzs7QUFFM0MsSUFBSSxPQUFPLEdBQUcsS0FBSztBQUNuQixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FDM0I7SUFDSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUMzQjtRQUNJLE9BQU8sR0FBRyxJQUFJO0tBQ2pCLEtBRUQ7UUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDO1FBQ25DLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ2xCO0NBQ0o7O0FBRUQsSUFBSSxFQUFFLEdBQUcsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7O0FBRXRGLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNULEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUs7SUFFekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDOztJQUVoSCxJQUFJLE9BQU8sQ0FDWDtRQUNJLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMseUJBQXlCLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDeEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLEVBQUUsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDdEYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1RCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDakI7QUFDTCxDQUFDLENBQUM7QUFDVixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMiLCJmaWxlIjoibHNmcHJpbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvYWVyby9ub2RlLWxpYmZwcmludC8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIHNjcmlwdCBsaXN0cyB0aGUgYXZhaWxhYmxlIGZpbmdlcnByaW50IHJlYWRlcnMgb24gdGhlIHN5c3RlbS5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvdHNkLmQudHNcIi8+XG5cbnZhciBsaWJmcHJpbnQgPSByZXF1aXJlKFwiLi4vXCIpO1xudmFyIHNwcmludGYgPSByZXF1aXJlKFwic3ByaW50Zi1qc1wiKS5zcHJpbnRmO1xuXG52YXIgdmVyYm9zZSA9IGZhbHNlO1xuaWYgKHByb2Nlc3MuYXJndi5sZW5ndGggPiAyKVxue1xuICAgIGlmIChwcm9jZXNzLmFyZ3ZbMl0gPT0gXCItdlwiKVxuICAgIHtcbiAgICAgICAgdmVyYm9zZSA9IHRydWU7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidXNhZ2U6IGxzZnByaW50IFstdl1cIik7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgICB9XG59XG5cbnZhciBmcCA9IG5ldyBsaWJmcHJpbnQuZnByaW50KCk7XG5jb25zb2xlLmxvZyhzcHJpbnRmKFwiJThzICUtOHMgJS04cyAlLTMyc1wiLCBcImhhbmRsZVwiLCBcInR5cGVcIiwgXCJkcml2ZXJcIiwgXCJkZXNjcmlwdGlvblwiKSk7XG5cbmZwLmluaXQoKTtcbmZwLmRpc2NvdmVyKCkuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNwcmludGYoXCIlOGQgJS04cyAlLThzICUtMzJzXCIsIGVudHJ5LmhhbmRsZSwgZW50cnkuZHJpdmVyX3R5cGUsICBlbnRyeS5kcml2ZXIsIGVudHJ5LmRyaXZlcl9kZXRhaWwpKTtcblxuICAgICAgICAgICAgaWYgKHZlcmJvc2UpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IGZwLmdldF9yZWFkZXIoZW50cnkuaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzcHJpbnRmKFwiXFx0IEVucm9sbCBzdGFnZXM6ICVkXCIsIHJlYWRlci5lbnJvbGxfc3RhZ2VzKSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3ByaW50ZihcIlxcdCBTdXBwb3J0cyBpbWFnaW5nOiAlc1wiLCByZWFkZXIuc3VwcG9ydHNfaW1hZ2luZykpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNwcmludGYoXCJcXHQgU3VwcG9ydHMgaWRlbnRpZmljYXRpb246ICVzXCIsIHJlYWRlci5zdXBwb3J0c19pZGVudGlmaWNhdGlvbikpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNwcmludGYoXCJcXHQgSW1hZ2UgaGVpZ2h0OiAlZFwiLCByZWFkZXIuaW1nX2hlaWdodCkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNwcmludGYoXCJcXHQgSW1hZ2Ugd2lkdGg6ICVkXCIsIHJlYWRlci5pbWdfd2lkdGgpKTtcbiAgICAgICAgICAgICAgICByZWFkZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5mcC5leGl0KCk7XG4iXX0=