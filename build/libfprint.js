#!/usr/bin/env node
/// <reference path="../typings/tsd.d.ts"/>
var binary = require('node-pre-gyp');
var path = require('path');
var PACKAGE_JSON = path.join(__dirname, '../package.json');
var binding_path = binary.find(path.resolve(PACKAGE_JSON));
var fprintbinding = require(binding_path);

var stream = require('stream');
var util = require('util');
var bunyan = require('bunyan');
var events = require('events');

var log;

(function (fp_enroll_result) {
    fp_enroll_result[fp_enroll_result["ENROLL_COMPLETE"] = 1] = "ENROLL_COMPLETE";
    fp_enroll_result[fp_enroll_result["ENROLL_FAIL"] = 2] = "ENROLL_FAIL";
    fp_enroll_result[fp_enroll_result["ENROLL_PASS"] = 3] = "ENROLL_PASS";
    fp_enroll_result[fp_enroll_result["ENROLL_RETRY"] = 100] = "ENROLL_RETRY";
    fp_enroll_result[fp_enroll_result["ENROLL_RETRY_TOO_SHORT"] = 101] = "ENROLL_RETRY_TOO_SHORT";
    fp_enroll_result[fp_enroll_result["ENROLL_RETRY_CENTER_FINGER"] = 102] = "ENROLL_RETRY_CENTER_FINGER";
    fp_enroll_result[fp_enroll_result["ENROLL_RETRY_REMOVE_FINGER"] = 103] = "ENROLL_RETRY_REMOVE_FINGER";
})(exports.fp_enroll_result || (exports.fp_enroll_result = {}));
var fp_enroll_result = exports.fp_enroll_result;

var fpreader = (function () {
    function fpreader(fpinstance) {
        var _this = this;
        this.close = function () {
            _this.wrapped.close();
        };
        // Start enrolling a fingerprint
        this.start_enroll = function (callback) {
            // tell the fpreader to begin the enroll finger process
            if (!_this.wrapped.enroll_finger(function (result, fpdata, fpimage, height, width) {
                var err = null;

                // If the result was not a successful enrollment
                if (result != 1 /* ENROLL_COMPLETE */) {
                    // store error code in err
                    err = fp_enroll_result[result];
                }

                // check the fpdata for completeness
                if (fpdata !== null && fpdata !== undefined) {
                    var data = new Buffer(fpdata.length);
                    fpdata.copy(data);
                }

                // shouldn't we check these as well? TODO
                var image = new Buffer(fpimage.length);
                fpimage.copy(image);

                // callback to fp_server
                callback(err, result, data, image, height, width);
            })) {
                // Not finished yet!
                callback("Enroll in progress!", null, null, null, null, null);
            }
        };
        // Stop enrolling a fingerprint
        this.stop_enroll = function () {
            // tell the fp.reader to stop enrollment (if it is enrolling)
            _this.wrapped.stop_enroll_finger();
        };
        // Start identifying a fingerprint
        this.start_identify = function (callback) {
            // TODO
            callback(null, null);
        };
        // Stop identifying a fingerprint
        this.stop_identify = function () {
            _this.wrapped.stop_identify_finger();
        };
        this.wrapped = fpinstance;

        //these values are static so we can grab them now
        this.enroll_stages = fpinstance.enroll_stages;
        this.supports_imaging = fpinstance.supports_imaging;
        this.supports_identification = fpinstance.supports_identification;
        this.img_width = fpinstance.img_width;
        this.img_height = fpinstance.img_height;
    }
    return fpreader;
})();
exports.fpreader = fpreader;

var fprint = (function () {
    function fprint() {
    }
    // Initializes libfprint and returns 0 if successful.
    fprint.prototype.init = function () {
        return fprintbinding.init();
    };

    fprint.prototype.discover = function () {
        var devices = [];
        fprintbinding.discover(function (handle, devid, drvtype, drvname, drvfullname) {
            var thisdev = {
                handle: handle,
                deviceid: devid,
                driver_type: drvtype,
                driver: drvname,
                driver_detail: drvfullname
            };

            devices.push(thisdev);
        });

        return devices;
    };

    fprint.prototype.get_reader = function (handle) {
        var reader = new fprintbinding.fpreader(handle);
        if (typeof reader != 'undefined') {
            return new fpreader(reader);
        }
        return null;
    };

    fprint.prototype.exit = function () {
        return fprintbinding.exit();
    };
    return fprint;
})();
exports.fprint = fprint;

//# sourceMappingURL=data:application/json;base64,