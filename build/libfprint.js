#!/usr/bin/env node
/// <reference path="../typings/tsd.d.ts"/>
var binary = require('node-pre-gyp');
var path = require('path');
var PACKAGE_JSON = path.join(__dirname, '../package.json');
var binding_path = binary.find(path.resolve(PACKAGE_JSON));
var fprintbinding = require(binding_path);

var stream = require('stream');
var util = require('util');
var bunyan = require('bunyan');
var events = require('events');

var log;

(function (fp_enroll_result) {
    fp_enroll_result[fp_enroll_result["ENROLL_COMPLETE"] = 1] = "ENROLL_COMPLETE";
    fp_enroll_result[fp_enroll_result["ENROLL_FAIL"] = 2] = "ENROLL_FAIL";
    fp_enroll_result[fp_enroll_result["ENROLL_PASS"] = 3] = "ENROLL_PASS";
    fp_enroll_result[fp_enroll_result["ENROLL_RETRY"] = 100] = "ENROLL_RETRY";
    fp_enroll_result[fp_enroll_result["ENROLL_RETRY_TOO_SHORT"] = 101] = "ENROLL_RETRY_TOO_SHORT";
    fp_enroll_result[fp_enroll_result["ENROLL_RETRY_CENTER_FINGER"] = 102] = "ENROLL_RETRY_CENTER_FINGER";
    fp_enroll_result[fp_enroll_result["ENROLL_RETRY_REMOVE_FINGER"] = 103] = "ENROLL_RETRY_REMOVE_FINGER";
    fp_enroll_result[fp_enroll_result["ENROLL_CANCELLED"] = 200] = "ENROLL_CANCELLED";
})(exports.fp_enroll_result || (exports.fp_enroll_result = {}));
var fp_enroll_result = exports.fp_enroll_result;

(function (fp_verify_result) {
    fp_verify_result[fp_verify_result["VERIFY_NO_MATCH"] = 0] = "VERIFY_NO_MATCH";
    fp_verify_result[fp_verify_result["VERIFY_MATCH"] = 1] = "VERIFY_MATCH";
    fp_verify_result[fp_verify_result["VERIFY_RETRY"] = 100] = "VERIFY_RETRY";
    fp_verify_result[fp_verify_result["VERIFY_RETRY_TOO_SHORT"] = 101] = "VERIFY_RETRY_TOO_SHORT";
    fp_verify_result[fp_verify_result["VERIFY_RETRY_CENTER_FINGER"] = 102] = "VERIFY_RETRY_CENTER_FINGER";
    fp_verify_result[fp_verify_result["VERIFY_RETRY_REMOVE_FINGER"] = 103] = "VERIFY_RETRY_REMOVE_FINGER";
    fp_verify_result[fp_verify_result["VERIFY_CANCELLED"] = 200] = "VERIFY_CANCELLED";
})(exports.fp_verify_result || (exports.fp_verify_result = {}));
var fp_verify_result = exports.fp_verify_result;

(function (fp_stop_result) {
    fp_stop_result[fp_stop_result["STOP_SUCCESS"] = 1] = "STOP_SUCCESS";
    fp_stop_result[fp_stop_result["STOP_FAIL"] = 2] = "STOP_FAIL";
    fp_stop_result[fp_stop_result["STOP_IGNORE"] = 3] = "STOP_IGNORE";
})(exports.fp_stop_result || (exports.fp_stop_result = {}));
var fp_stop_result = exports.fp_stop_result;

var fpreader = (function () {
    function fpreader(fpinstance) {
        var _this = this;
        this.close = function () {
            _this.wrapped.close();
        };
        // update the database
        this.update_database = function (fplist) {
            _this.wrapped.update_database(fplist);
        };
        // Start enrolling a fingerprint
        this.start_enroll = function (callback) {
            // tell the fpreader to begin the enroll finger process
            if (!_this.wrapped.enroll_finger(function (result, fpdata, fpimage, height, width) {
                var err = null;

                // If the result was not a successful enrollment
                if (result != 1 /* ENROLL_COMPLETE */) {
                    // store error code in err
                    err = fp_enroll_result[result];
                    callback(err, null, null, null, null, null);
                } else {
                    // check the fpdata for completeness
                    if (fpdata !== null && fpdata !== undefined) {
                        var data = new Buffer(fpdata.toString('utf8'), 'base64');
                        //fpdata.copy(data);
                    }

                    // shouldn't we check these as well? TODO
                    var image = new Buffer(fpimage.length);
                    fpimage.copy(image);

                    // callback to fp_server
                    callback(err, result, data, image, height, width);
                }
            })) {
                // Not finished yet!
                callback("Enroll in progress!", null, null, null, null, null);
            }
        };
        // Stop enrolling a fingerprint
        this.stop_enroll = function (callback) {
            // tell the fp.reader to stop enrollment (if it is enrolling)
            _this.wrapped.stop_enroll_finger(function (result) {
                var err = null;
                if (result == 1 /* STOP_SUCCESS */) {
                    callback(err, true);
                } else {
                    err = fp_stop_result[result];
                    callback(err, null);
                }
            });
        };
        // ******TODO figure out how to pass an argument down here
        // Start identifying a fingerprint
        this.start_identify = function (callback) {
            // tell the fpreader to begin the identify finger process
            if (!_this.wrapped.identify_finger(function (result, fpindex, fpimage, height, width) {
                var err = null;

                // If the result was not successful
                if (result != 1 /* VERIFY_MATCH */) {
                    // store error code in err
                    err = fp_verify_result[result];
                    callback(err, null, null, null, null, null);
                } else {
                    // shouldn't we check these as well? TODO
                    var image = new Buffer(fpimage.length);
                    fpimage.copy(image);

                    // callback to fp_server
                    callback(err, result, fpindex, image, height, width);
                }
            })) {
                // Not finished yet!
                callback("Identify in progress!", null, null, null, null, null);
            }
        };
        // Stop identifying a fingerprint
        this.stop_identify = function (callback) {
            // tell the fp.reader to stop identification (if it is identifying)
            _this.wrapped.stop_identify_finger(function (result) {
                var err = null;
                if (result == 1 /* STOP_SUCCESS */) {
                    callback(err, true);
                } else {
                    err = fp_stop_result[result];
                    callback(err, null);
                }
            });
        };
        // Driver for async fingerprint activity
        this.handle_events = function () {
            // tell the fp.reader to handle events, i.e. advance the reader a step
            _this.wrapped.handle_events();
        };
        this.wrapped = fpinstance;

        //these values are static so we can grab them now
        this.enroll_stages = fpinstance.enroll_stages;
        this.supports_imaging = fpinstance.supports_imaging;
        this.supports_identification = fpinstance.supports_identification;
        this.img_width = fpinstance.img_width;
        this.img_height = fpinstance.img_height;
    }
    return fpreader;
})();
exports.fpreader = fpreader;

var fprint = (function () {
    function fprint() {
    }
    // Initializes libfprint and returns 0 if successful.
    fprint.prototype.init = function () {
        return fprintbinding.init();
    };

    fprint.prototype.discover = function () {
        var devices = [];
        fprintbinding.discover(function (handle, devid, drvtype, drvname, drvfullname) {
            var thisdev = {
                handle: handle,
                deviceid: devid,
                driver_type: drvtype,
                driver: drvname,
                driver_detail: drvfullname
            };

            devices.push(thisdev);
        });

        return devices;
    };

    fprint.prototype.get_reader = function (handle) {
        var reader = new fprintbinding.fpreader(handle);
        if (typeof reader != 'undefined') {
            return new fpreader(reader);
        }
        return null;
    };

    fprint.prototype.exit = function () {
        return fprintbinding.exit();
    };
    return fprint;
})();
exports.fprint = fprint;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYmZwcmludC50cyJdLCJuYW1lcyI6WyJmcF9lbnJvbGxfcmVzdWx0IiwiZnBfdmVyaWZ5X3Jlc3VsdCIsImZwX3N0b3BfcmVzdWx0IiwiZnByZWFkZXIiLCJmcHJlYWRlci5jb25zdHJ1Y3RvciIsImZwcmludCIsImZwcmludC5jb25zdHJ1Y3RvciIsImZwcmludC5pbml0IiwiZnByaW50LmRpc2NvdmVyIiwiZnByaW50LmdldF9yZWFkZXIiLCJmcHJpbnQuZXhpdCJdLCJtYXBwaW5ncyI6IkFBQUEsMkNBQTJDO0FBQTNDLElBRUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDcEMsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUMxQixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQztBQUMxRCxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDMUQsSUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQzs7QUFFekMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUM5QixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQzFCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDOUIsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQzs7QUFFOUIsSUFBSSxHQUFHOztDQUVQLFVBQVksZ0JBQWdCO0lBRXhCQSx1REFBa0JBLENBQUNBLHFCQUFBQTtJQUNuQkEsbURBQWNBLENBQUNBLGlCQUFBQTtJQUNmQSxtREFBY0EsQ0FBQ0EsaUJBQUFBO0lBQ2ZBLG9EQUFlQSxHQUFHQSxrQkFBQUE7SUFDbEJBLDhEQUF5QkEsR0FBR0EsNEJBQUFBO0lBQzVCQSxrRUFBNkJBLEdBQUdBLGdDQUFBQTtJQUNoQ0Esa0VBQTZCQSxH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QUFDQTs7SUFFREosd0JBQUFBO1FBQ0lLLE9BQU9BLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQy9CQSxDQUFDQTtJQUdMTCxjQUFDQTtBQUFEQSxDQUFDQSxJQUFBO0FBdkNELHdCQXVDQztBQUNEIiwiZmlsZSI6ImxpYmZwcmludC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9hZXJvL25vZGUtbGliZnByaW50LyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL3RzZC5kLnRzXCIvPlxuXG52YXIgYmluYXJ5ID0gcmVxdWlyZSgnbm9kZS1wcmUtZ3lwJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBQQUNLQUdFX0pTT04gPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vcGFja2FnZS5qc29uJyk7XG52YXIgYmluZGluZ19wYXRoID0gYmluYXJ5LmZpbmQocGF0aC5yZXNvbHZlKFBBQ0tBR0VfSlNPTikpO1xudmFyIGZwcmludGJpbmRpbmcgPSByZXF1aXJlKGJpbmRpbmdfcGF0aCk7XG5cbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGJ1bnlhbiA9IHJlcXVpcmUoJ2J1bnlhbicpO1xudmFyIGV2ZW50cyA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuXG52YXIgbG9nO1xuXG5leHBvcnQgZW51bSBmcF9lbnJvbGxfcmVzdWx0XG57XG4gICAgRU5ST0xMX0NPTVBMRVRFID0gMSxcbiAgICBFTlJPTExfRkFJTCA9IDIsXG4gICAgRU5ST0xMX1BBU1MgPSAzLFxuICAgIEVOUk9MTF9SRVRSWSA9IDEwMCxcbiAgICBFTlJPTExfUkVUUllfVE9PX1NIT1JUID0gMTAxLFxuICAgIEVOUk9MTF9SRVRSWV9DRU5URVJfRklOR0VSID0gMTAyLFxuICAgIEVOUk9MTF9SRVRSWV9SRU1PVkVfRklOR0VSID0gMTAzLFxuICAgIEVOUk9MTF9DQU5DRUxMRUQgPSAyMDAgLy8gY3VzdG9tLCBmb3IgYXN5bmNcbn1cblxuZXhwb3J0IGVudW0gZnBfdmVyaWZ5X3Jlc3VsdFxueyBcbiAgICBWRVJJRllfTk9fTUFUQ0ggPSAwLCBcbiAgICBWRVJJRllfTUFUQ0ggPSAxLCBcbiAgICBWRVJJRllfUkVUUlkgPSAxMDAsIFxuICAgIFZFUklGWV9SRVRSWV9UT09fU0hPUlQgPSAxMDEsIFxuICAgIFZFUklGWV9SRVRSWV9DRU5URVJfRklOR0VSID0gMTAyLCBcbiAgICBWRVJJRllfUkVUUllfUkVNT1ZFX0ZJTkdFUiA9IDEwMyxcbiAgICBWRVJJRllfQ0FOQ0VMTEVEID0gMjAwIC8vIGN1c3RvbSwgZm9yIGFzeW5jXG59XG5cbmV4cG9ydCBlbnVtIGZwX3N0b3BfcmVzdWx0XG57XG4gICAgU1RPUF9TVUNDRVNTID0gMSxcbiAgICBTVE9QX0ZBSUwgPSAyLFxuICAgIFNUT1BfSUdOT1JFID0gM1xufVxuXG5leHBvcnQgY2xhc3MgZnByZWFkZXIge1xuICAgIHByaXZhdGUgd3JhcHBlZDtcblxuICAgIGVucm9sbF9zdGFnZXMgOiBudW1iZXI7XG4gICAgc3VwcG9ydHNfaW1hZ2luZyA6IGJvb2xlYW47XG4gICAgc3VwcG9ydHNfaWRlbnRpZmljYXRpb246IGJvb2xlYW47XG4gICAgaW1nX3dpZHRoOiBudW1iZXI7XG4gICAgaW1nX2hlaWdodDogbnVtYmVyO1xuXG4gICAgY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMud3JhcHBlZC5jbG9zZSgpO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSB0aGUgZGF0YWJhc2VcbiAgICB1cGRhdGVfZGF0YWJhc2UgPSAoZnBsaXN0OiBzdHJpbmdbXSkgOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy53cmFwcGVkLnVwZGF0ZV9kYXRhYmFzZShmcGxpc3QpO1xuICAgIH1cblxuICAgIC8vIFN0YXJ0IGVucm9sbGluZyBhIGZpbmdlcnByaW50XG4gICAgc3RhcnRfZW5yb2xsID0gKGNhbGxiYWNrIDogKGVyciwgcmVzdWx0IDogZnBfZW5yb2xsX3Jlc3VsdCwgZnBkYXRhIDogQnVmZmVyLCBmcGltYWdlOiBCdWZmZXIsIGhlaWdodCA6IE51bWJlciwgd2lkdGggOiBOdW1iZXIpID0+IHZvaWQpIDogdm9pZCA9PiB7XG4gICAgXG4gICAgICAgIC8vIHRlbGwgdGhlIGZwcmVhZGVyIHRvIGJlZ2luIHRoZSBlbnJvbGwgZmluZ2VyIHByb2Nlc3NcbiAgICAgICAgaWYgKCF0aGlzLndyYXBwZWQuZW5yb2xsX2ZpbmdlcihcbiAgICAgICAgICAgICAgICAvLyBFbnJvbGwgZmluZ2VyIGhhcyBjb21wbGV0ZWRcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0OiBmcF9lbnJvbGxfcmVzdWx0LCBmcGRhdGEsIGZwaW1hZ2UsIGhlaWdodCA6IG51bWJlciwgd2lkdGg6IG51bWJlcilcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXN1bHQgd2FzIG5vdCBhIHN1Y2Nlc3NmdWwgZW5yb2xsbWVudFxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9IGZwX2Vucm9sbF9yZXN1bHQuRU5ST0xMX0NPTVBMRVRFKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBlcnJvciBjb2RlIGluIGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyID0gZnBfZW5yb2xsX3Jlc3VsdFtyZXN1bHRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIHRoZSBmcGRhdGEgZm9yIGNvbXBsZXRlbmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZwZGF0YSAhPT0gbnVsbCAmJiBmcGRhdGEgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IG5ldyBCdWZmZXIoZnBkYXRhLnRvU3RyaW5nKCd1dGY4JyksJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZnBkYXRhLmNvcHkoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3VsZG4ndCB3ZSBjaGVjayB0aGVzZSBhcyB3ZWxsPyBUT0RPXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1hZ2UgPSBuZXcgQnVmZmVyKGZwaW1hZ2UubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZwaW1hZ2UuY29weShpbWFnZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrIHRvIGZwX3NlcnZlclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQsIGRhdGEsIGltYWdlLCBoZWlnaHQsIHdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgKSkge1xuICAgICAgICAgICAgLy8gTm90IGZpbmlzaGVkIHlldCFcbiAgICAgICAgICAgIGNhbGxiYWNrKFwiRW5yb2xsIGluIHByb2dyZXNzIVwiLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFN0b3AgZW5yb2xsaW5nIGEgZmluZ2VycHJpbnRcbiAgICBzdG9wX2Vucm9sbCA9IChjYWxsYmFjayA6IChlcnIscmVzdWx0KSA9PiB2b2lkKSA6IHZvaWQgPT4ge1xuICAgICAgICAvLyB0ZWxsIHRoZSBmcC5yZWFkZXIgdG8gc3RvcCBlbnJvbGxtZW50IChpZiBpdCBpcyBlbnJvbGxpbmcpXG4gICAgICAgIHRoaXMud3JhcHBlZC5zdG9wX2Vucm9sbF9maW5nZXIoXG4gICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0OiBmcF9zdG9wX3Jlc3VsdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09IGZwX3N0b3BfcmVzdWx0LlNUT1BfU1VDQ0VTUykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVyciA9IGZwX3N0b3BfcmVzdWx0W3Jlc3VsdF07XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vICoqKioqKlRPRE8gZmlndXJlIG91dCBob3cgdG8gcGFzcyBhbiBhcmd1bWVudCBkb3duIGhlcmVcblxuICAgIC8vIFN0YXJ0IGlkZW50aWZ5aW5nIGEgZmluZ2VycHJpbnRcbiAgICBzdGFydF9pZGVudGlmeSA9IChjYWxsYmFjayA6IChlcnIsIHJlc3VsdCA6IGZwX3ZlcmlmeV9yZXN1bHQsIGZwaW5kZXggOiBOdW1iZXIsIGZwaW1hZ2U6IEJ1ZmZlciwgaGVpZ2h0IDogTnVtYmVyLCB3aWR0aCA6IE51bWJlcikgPT4gdm9pZCkgOiB2b2lkID0+IHtcbiAgICBcbiAgICAgICAgLy8gdGVsbCB0aGUgZnByZWFkZXIgdG8gYmVnaW4gdGhlIGlkZW50aWZ5IGZpbmdlciBwcm9jZXNzXG4gICAgICAgIGlmICghdGhpcy53cmFwcGVkLmlkZW50aWZ5X2ZpbmdlciggLy8gKioqKiogVE9ETyBwYXNzIGluIHRoZSBsaXN0IGFyZ1xuICAgICAgICAgICAgICAgIC8vIElkZW50aWZ5IGZpbmdlciBoYXMgY29tcGxldGVkXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdDogZnBfdmVyaWZ5X3Jlc3VsdCwgZnBpbmRleCwgZnBpbWFnZSwgaGVpZ2h0IDogbnVtYmVyLCB3aWR0aDogbnVtYmVyKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHJlc3VsdCB3YXMgbm90IHN1Y2Nlc3NmdWxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBmcF92ZXJpZnlfcmVzdWx0LlZFUklGWV9NQVRDSClcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgZXJyb3IgY29kZSBpbiBlcnJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyciA9IGZwX3ZlcmlmeV9yZXN1bHRbcmVzdWx0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycixudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG91bGRuJ3Qgd2UgY2hlY2sgdGhlc2UgYXMgd2VsbD8gVE9ET1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltYWdlID0gbmV3IEJ1ZmZlcihmcGltYWdlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcGltYWdlLmNvcHkoaW1hZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsYmFjayB0byBmcF9zZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0LCBmcGluZGV4LCBpbWFnZSwgaGVpZ2h0LCB3aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICkpIHtcbiAgICAgICAgICAgIC8vIE5vdCBmaW5pc2hlZCB5ZXQhXG4gICAgICAgICAgICBjYWxsYmFjayhcIklkZW50aWZ5IGluIHByb2dyZXNzIVwiLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFN0b3AgaWRlbnRpZnlpbmcgYSBmaW5nZXJwcmludFxuICAgIHN0b3BfaWRlbnRpZnkgPSAoY2FsbGJhY2sgOiAoZXJyLHJlc3VsdCkgPT4gdm9pZCkgOiB2b2lkID0+IHtcbiAgICAgICAgLy8gdGVsbCB0aGUgZnAucmVhZGVyIHRvIHN0b3AgaWRlbnRpZmljYXRpb24gKGlmIGl0IGlzIGlkZW50aWZ5aW5nKVxuICAgICAgICB0aGlzLndyYXBwZWQuc3RvcF9pZGVudGlmeV9maW5nZXIoXG4gICAgICAgICAgICBmdW5jdGlvbiAocmVzdWx0OiBmcF9zdG9wX3Jlc3VsdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09IGZwX3N0b3BfcmVzdWx0LlNUT1BfU1VDQ0VTUykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVyciA9IGZwX3N0b3BfcmVzdWx0W3Jlc3VsdF07XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIERyaXZlciBmb3IgYXN5bmMgZmluZ2VycHJpbnQgYWN0aXZpdHlcbiAgICBoYW5kbGVfZXZlbnRzID0gKCkgOiB2b2lkID0+IHtcbiAgICAgICAgLy8gdGVsbCB0aGUgZnAucmVhZGVyIHRvIGhhbmRsZSBldmVudHMsIGkuZS4gYWR2YW5jZSB0aGUgcmVhZGVyIGEgc3RlcFxuICAgICAgICB0aGlzLndyYXBwZWQuaGFuZGxlX2V2ZW50cygpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGZwaW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkID0gZnBpbnN0YW5jZTtcblxuICAgICAgICAvL3RoZXNlIHZhbHVlcyBhcmUgc3RhdGljIHNvIHdlIGNhbiBncmFiIHRoZW0gbm93XG4gICAgICAgIHRoaXMuZW5yb2xsX3N0YWdlcyA9IGZwaW5zdGFuY2UuZW5yb2xsX3N0YWdlcztcbiAgICAgICAgdGhpcy5zdXBwb3J0c19pbWFnaW5nID0gZnBpbnN0YW5jZS5zdXBwb3J0c19pbWFnaW5nO1xuICAgICAgICB0aGlzLnN1cHBvcnRzX2lkZW50aWZpY2F0aW9uID0gZnBpbnN0YW5jZS5zdXBwb3J0c19pZGVudGlmaWNhdGlvbjtcbiAgICAgICAgdGhpcy5pbWdfd2lkdGggPSBmcGluc3RhbmNlLmltZ193aWR0aDtcbiAgICAgICAgdGhpcy5pbWdfaGVpZ2h0ID0gZnBpbnN0YW5jZS5pbWdfaGVpZ2h0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIGZwcmludCB7XG5cbiAgICAvLyBJbml0aWFsaXplcyBsaWJmcHJpbnQgYW5kIHJldHVybnMgMCBpZiBzdWNjZXNzZnVsLlxuICAgIGluaXQoKSA6IG51bWJlciAge1xuICAgICAgICByZXR1cm4gZnByaW50YmluZGluZy5pbml0KCk7XG4gICAgfVxuXG4gICAgZGlzY292ZXIoKSB7XG4gICAgICAgIHZhciBkZXZpY2VzID0gW107XG4gICAgICAgIGZwcmludGJpbmRpbmcuZGlzY292ZXIoIGZ1bmN0aW9uKGhhbmRsZSwgZGV2aWQsIGRydnR5cGUsIGRydm5hbWUsIGRydmZ1bGxuYW1lKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNkZXYgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGU6IGhhbmRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZWlkOiBkZXZpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyaXZlcl90eXBlOiBkcnZ0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHJpdmVyOiBkcnZuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHJpdmVyX2RldGFpbDogZHJ2ZnVsbG5hbWVcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBkZXZpY2VzLnB1c2godGhpc2Rldik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGRldmljZXM7XG4gICAgfVxuXG4gICAgZ2V0X3JlYWRlcihoYW5kbGU6IG51bWJlcikge1xuICAgICAgICB2YXIgcmVhZGVyID0gbmV3IGZwcmludGJpbmRpbmcuZnByZWFkZXIoaGFuZGxlKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZWFkZXIgIT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZnByZWFkZXIocmVhZGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBleGl0KCkgOiB2b2lkIHtcbiAgICAgICAgcmV0dXJuIGZwcmludGJpbmRpbmcuZXhpdCgpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yICgpIHsgfVxufVxuIl19