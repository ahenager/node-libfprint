#!/usr/bin/env node
// This script lists the available fingerprint readers on the system.
/// <reference path="../typings/tsd.d.ts"/>
var promise = require("bluebird");
var libfprint = promise.promisifyAll(require("../"));
var sprintf = require("sprintf-js").sprintf;
var verbose = false;
if (process.argv.length > 2) {
    if (process.argv[2] == "-v") {
        verbose = true;
    }
    else {
        console.log("usage: lsfprint [-v]");
        process.exit(0);
    }
}
var fp = new libfprint.fprint();
console.log(sprintf("%8s %-8s %-8s %-32s", "handle", "type", "driver", "description"));
fp.init();
fp.discover().forEach(function (entry) {
    console.log(sprintf("%8d %-8s %-8s %-32s", entry.handle, entry.driver_type, entry.driver, entry.driver_detail));
    if (verbose) {
        var reader = promise.promisifyAll(fp.get_reader(entry.handle));
        console.log(sprintf("\t Enroll stages: %d", reader.enroll_stages));
        console.log(sprintf("\t Supports imaging: %s", reader.supports_imaging));
        console.log(sprintf("\t Supports identification: %s", reader.supports_identification));
        console.log(sprintf("\t Image height: %d", reader.img_height));
        console.log(sprintf("\t Image width: %d", reader.img_width));
        reader.start_enrollAsync().then(function (result) {
            console.log(result);
        }).catch(function (err) {
            console.log("ERR");
            console.log(err);
        });
        console.log("DONE");
    }
});
console.log("BYE");

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZwcmludF9lbnJvbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUVBQXFFO0FBRXJFLEFBRUEsMkNBRjJDO0lBRXZDLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbEMsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNyRCxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBRTVDLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUNwQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FDNUIsQ0FBQztJQUNHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQzVCLENBQUM7UUFDRyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFDRCxJQUFJLENBQ0osQ0FBQztRQUNHLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNwQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7QUFDTCxDQUFDO0FBRUQsSUFBSSxFQUFFLEdBQUcsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUV2RixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDVixFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsS0FBSztJQUV6QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUVqSCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FDWixDQUFDO1FBQ0csSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQy9ELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLHlCQUF5QixFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDekUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLEVBQUUsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUN2RixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUMvRCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUM3RCxNQUFNLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQzNCLFVBQVUsTUFBTTtZQUVaLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUNBLENBQ0EsS0FBSyxDQUNGLFVBQVUsR0FBRztZQUVULE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQ0osQ0FBQTtRQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyIsImZpbGUiOiJmcHJpbnRfZW5yb2xsLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL2Flcm8vbm9kZS1saWJmcHJpbnQvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBzY3JpcHQgbGlzdHMgdGhlIGF2YWlsYWJsZSBmaW5nZXJwcmludCByZWFkZXJzIG9uIHRoZSBzeXN0ZW0uXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL3RzZC5kLnRzXCIvPlxuXG52YXIgcHJvbWlzZSA9IHJlcXVpcmUoXCJibHVlYmlyZFwiKTtcbnZhciBsaWJmcHJpbnQgPSBwcm9taXNlLnByb21pc2lmeUFsbChyZXF1aXJlKFwiLi4vXCIpKTtcbnZhciBzcHJpbnRmID0gcmVxdWlyZShcInNwcmludGYtanNcIikuc3ByaW50ZjtcblxudmFyIHZlcmJvc2UgPSBmYWxzZTtcbmlmIChwcm9jZXNzLmFyZ3YubGVuZ3RoID4gMilcbntcbiAgICBpZiAocHJvY2Vzcy5hcmd2WzJdID09IFwiLXZcIilcbiAgICB7XG4gICAgICAgIHZlcmJvc2UgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgICBjb25zb2xlLmxvZyhcInVzYWdlOiBsc2ZwcmludCBbLXZdXCIpO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgfVxufVxuXG52YXIgZnAgPSBuZXcgbGliZnByaW50LmZwcmludCgpO1xuY29uc29sZS5sb2coc3ByaW50ZihcIiU4cyAlLThzICUtOHMgJS0zMnNcIiwgXCJoYW5kbGVcIiwgXCJ0eXBlXCIsIFwiZHJpdmVyXCIsIFwiZGVzY3JpcHRpb25cIikpO1xuXG5mcC5pbml0KCk7XG5mcC5kaXNjb3ZlcigpLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzcHJpbnRmKFwiJThkICUtOHMgJS04cyAlLTMyc1wiLCBlbnRyeS5oYW5kbGUsIGVudHJ5LmRyaXZlcl90eXBlLCAgZW50cnkuZHJpdmVyLCBlbnRyeS5kcml2ZXJfZGV0YWlsKSk7XG5cbiAgICAgICAgICAgIGlmICh2ZXJib3NlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciByZWFkZXIgPSBwcm9taXNlLnByb21pc2lmeUFsbChmcC5nZXRfcmVhZGVyKGVudHJ5LmhhbmRsZSkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNwcmludGYoXCJcXHQgRW5yb2xsIHN0YWdlczogJWRcIiwgcmVhZGVyLmVucm9sbF9zdGFnZXMpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzcHJpbnRmKFwiXFx0IFN1cHBvcnRzIGltYWdpbmc6ICVzXCIsIHJlYWRlci5zdXBwb3J0c19pbWFnaW5nKSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3ByaW50ZihcIlxcdCBTdXBwb3J0cyBpZGVudGlmaWNhdGlvbjogJXNcIiwgcmVhZGVyLnN1cHBvcnRzX2lkZW50aWZpY2F0aW9uKSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3ByaW50ZihcIlxcdCBJbWFnZSBoZWlnaHQ6ICVkXCIsIHJlYWRlci5pbWdfaGVpZ2h0KSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3ByaW50ZihcIlxcdCBJbWFnZSB3aWR0aDogJWRcIiwgcmVhZGVyLmltZ193aWR0aCkpO1xuICAgICAgICAgICAgICAgIHJlYWRlci5zdGFydF9lbnJvbGxBc3luYygpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRVJSXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRPTkVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuY29uc29sZS5sb2coXCJCWUVcIik7XG4iXX0=